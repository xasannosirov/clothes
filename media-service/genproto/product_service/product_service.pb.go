// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: product_service.proto

package product_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("product_service.proto", fileDescriptor_64a1a24e6b7d7ed5) }

var fileDescriptor_64a1a24e6b7d7ed5 = []byte{
	// 524 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0xcf, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0xc9, 0x85, 0xc3, 0x84, 0x24, 0x95, 0xab, 0x42, 0xb4, 0x82, 0x45, 0x42, 0x70, 0xe1,
	0x50, 0x24, 0x78, 0x82, 0x64, 0x97, 0xae, 0x02, 0xa1, 0x2d, 0x49, 0x0a, 0x12, 0x1c, 0x60, 0xb3,
	0x3b, 0x22, 0xab, 0x3a, 0xeb, 0x60, 0xbb, 0x91, 0xfa, 0x26, 0x3c, 0x12, 0x47, 0x1e, 0xa1, 0x0a,
	0x2f, 0x82, 0x62, 0x7b, 0x37, 0x21, 0xfb, 0x57, 0x81, 0x5e, 0x67, 0xe6, 0xfb, 0x79, 0xfc, 0xd9,
	0x63, 0xc3, 0xd1, 0x82, 0xb3, 0xf0, 0x2a, 0x90, 0x5f, 0x04, 0xf2, 0x65, 0x14, 0xe0, 0xf1, 0x82,
	0x33, 0xc9, 0x48, 0x67, 0x27, 0x6c, 0x1d, 0x26, 0x81, 0x39, 0x0b, 0x91, 0xea, 0xaa, 0x97, 0x37,
	0x1d, 0x68, 0x9f, 0xeb, 0xf8, 0x58, 0xd7, 0x91, 0xd7, 0xd0, 0x72, 0x38, 0xfa, 0x12, 0x4d, 0x9c,
	0x74, 0x8f, 0x77, 0x57, 0x30, 0x19, 0xcb, 0xca, 0x64, 0x3c, 0x94, 0x1f, 0x23, 0x39, 0x1b, 0xb8,
	0xc4, 0x81, 0xd6, 0xc5, 0x22, 0xac, 0x85, 0x29, 0xcc, 0x90, 0x21, 0xb4, 0x5c, 0xa4, 0xb8, 0x81,
	0x94, 0xac, 0x68, 0x3d, 0xce, 0xe4, 0xb4, 0x76, 0x84, 0x62, 0xc1, 0x62, 0x81, 0xe4, 0x04, 0xda,
	0x1e, 0x4a, 0x83, 0xea, 0x5f, 0x0f, 0xdc, 0x52, 0x5c, 0x71, 0x57, 0x13, 0xc5, 0xe9, 0x51, 0x6a,
	0x02, 0x82, 0x3c, 0xcc, 0xd4, 0x0e, 0x23, 0x21, 0x47, 0xf8, 0xfd, 0x0a, 0x85, 0xb4, 0x9e, 0xe6,
	0x66, 0x8d, 0x38, 0xed, 0xae, 0x07, 0x4d, 0xed, 0xfb, 0x19, 0x0f, 0x91, 0x93, 0xfb, 0x19, 0x91,
	0x8a, 0x97, 0x7a, 0xfe, 0x06, 0x9a, 0x8e, 0x1f, 0x07, 0x48, 0x35, 0xe2, 0x9f, 0xcc, 0xea, 0xc3,
	0x3d, 0x0f, 0xa5, 0x02, 0x55, 0x5a, 0x55, 0xd0, 0x2b, 0x39, 0x57, 0x8c, 0x1e, 0xd5, 0xfd, 0x54,
	0xd9, 0xf4, 0x24, 0x37, 0xab, 0xa4, 0x69, 0x57, 0xa7, 0xd0, 0x1a, 0xa3, 0xcf, 0x83, 0x59, 0x72,
	0x16, 0x0f, 0x32, 0xa2, 0x93, 0x88, 0x4a, 0xe4, 0x35, 0x4d, 0x3f, 0x85, 0xf6, 0x08, 0x03, 0x36,
	0x9f, 0x63, 0x1c, 0xfa, 0x32, 0x62, 0x71, 0x8e, 0xef, 0xaa, 0xa0, 0x26, 0xef, 0x2b, 0x74, 0x3d,
	0x94, 0x63, 0x7f, 0x89, 0x61, 0x72, 0x39, 0xfa, 0xd7, 0x17, 0x02, 0xf9, 0xc0, 0x25, 0x76, 0x91,
	0x83, 0x3a, 0x5f, 0x73, 0x85, 0xcf, 0x70, 0xa8, 0x64, 0x62, 0x46, 0x23, 0x21, 0xff, 0x33, 0x7c,
	0x0a, 0x56, 0x72, 0xe8, 0xb7, 0xb6, 0x01, 0x07, 0x9a, 0xc3, 0xe8, 0x32, 0x9d, 0xe8, 0xa3, 0x1c,
	0xd1, 0x25, 0x5a, 0x8f, 0x32, 0xe1, 0x77, 0x6c, 0x89, 0xdb, 0x90, 0xb5, 0xc9, 0xc5, 0x90, 0x75,
	0xb6, 0x0e, 0x44, 0xfa, 0xbc, 0x04, 0x22, 0x7d, 0x5e, 0x05, 0x79, 0x0b, 0x07, 0x8e, 0xba, 0x3f,
	0x72, 0xc2, 0x8a, 0x9f, 0x3a, 0x53, 0x52, 0x05, 0xfb, 0x00, 0xc4, 0x43, 0xe9, 0x46, 0xc2, 0x9f,
	0x52, 0xac, 0xf9, 0xba, 0xd4, 0x19, 0x9b, 0x11, 0x1c, 0x6c, 0x5e, 0x3e, 0x33, 0x8c, 0x65, 0x03,
	0x5d, 0x87, 0xa9, 0x7b, 0x35, 0x4c, 0xb3, 0xbf, 0x72, 0x6a, 0xfe, 0xfd, 0x30, 0xd2, 0x94, 0x3b,
	0x81, 0xce, 0x86, 0xbb, 0xbe, 0x0b, 0xe5, 0xd0, 0x67, 0xb9, 0xd0, 0x64, 0x3e, 0x52, 0xea, 0xfb,
	0x6d, 0xea, 0xfa, 0x5c, 0xf7, 0x31, 0x40, 0xe9, 0xb6, 0x1a, 0x35, 0xdf, 0x40, 0xba, 0xf9, 0x7d,
	0xbe, 0x81, 0xdd, 0xed, 0x9f, 0x41, 0x53, 0x53, 0x75, 0x93, 0xfb, 0x9c, 0xfd, 0x5f, 0x6d, 0xf6,
	0x9f, 0xff, 0x5c, 0xd9, 0x8d, 0x5f, 0x2b, 0xbb, 0x71, 0xb3, 0xb2, 0x1b, 0x3f, 0x7e, 0xdb, 0x77,
	0x3e, 0x75, 0xbf, 0x61, 0xac, 0xbe, 0xff, 0x17, 0x3b, 0xea, 0xe9, 0x5d, 0x15, 0x7e, 0xf5, 0x27,
	0x00, 0x00, 0xff, 0xff, 0xe7, 0xab, 0x9f, 0x5d, 0x54, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProductServiceClient interface {
	CreateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*GetWithID, error)
	UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error)
	DeleteProduct(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetProductByID(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*Product, error)
	GetAllProducts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListProductResponse, error)
	CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*GetWithID, error)
	CancelOrder(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetOrderByID(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*Order, error)
	GetAllOrders(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListOrderResponse, error)
	SearchProduct(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*ListProductResponse, error)
	Recommendation(ctx context.Context, in *Recom, opts ...grpc.CallOption) (*ListProductResponse, error)
	GetSavedProductsByUserID(ctx context.Context, in *GetWithUserID, opts ...grpc.CallOption) (*ListProductResponse, error)
	GetWishlistByUserID(ctx context.Context, in *GetWithUserID, opts ...grpc.CallOption) (*ListProductResponse, error)
	GetOrderedProductsByUserID(ctx context.Context, in *GetWithUserID, opts ...grpc.CallOption) (*ListProductResponse, error)
	LikeProduct(ctx context.Context, in *Like, opts ...grpc.CallOption) (*MoveResponse, error)
	SaveProduct(ctx context.Context, in *Save, opts ...grpc.CallOption) (*MoveResponse, error)
	StarProduct(ctx context.Context, in *Star, opts ...grpc.CallOption) (*MoveResponse, error)
	CommentToProduct(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*MoveResponse, error)
	GetDisableProducts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListOrderResponse, error)
	GetProductOrders(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*ListOrderResponse, error)
	GetProductComments(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*ListCommentResponse, error)
	GetProductLikes(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*ListWishlistResponse, error)
	GetProductStars(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*ListStarsResponse, error)
	GetAllComments(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCommentResponse, error)
	GetAllStars(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListStarsResponse, error)
}

type productServiceClient struct {
	cc *grpc.ClientConn
}

func NewProductServiceClient(cc *grpc.ClientConn) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) CreateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*GetWithID, error) {
	out := new(GetWithID)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteProduct(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductByID(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/GetProductByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAllProducts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListProductResponse, error) {
	out := new(ListProductResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/GetAllProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*GetWithID, error) {
	out := new(GetWithID)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CancelOrder(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetOrderByID(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/GetOrderByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAllOrders(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListOrderResponse, error) {
	out := new(ListOrderResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/GetAllOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) SearchProduct(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*ListProductResponse, error) {
	out := new(ListProductResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/SearchProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) Recommendation(ctx context.Context, in *Recom, opts ...grpc.CallOption) (*ListProductResponse, error) {
	out := new(ListProductResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/Recommendation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetSavedProductsByUserID(ctx context.Context, in *GetWithUserID, opts ...grpc.CallOption) (*ListProductResponse, error) {
	out := new(ListProductResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/GetSavedProductsByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetWishlistByUserID(ctx context.Context, in *GetWithUserID, opts ...grpc.CallOption) (*ListProductResponse, error) {
	out := new(ListProductResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/GetWishlistByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetOrderedProductsByUserID(ctx context.Context, in *GetWithUserID, opts ...grpc.CallOption) (*ListProductResponse, error) {
	out := new(ListProductResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/GetOrderedProductsByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) LikeProduct(ctx context.Context, in *Like, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/LikeProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) SaveProduct(ctx context.Context, in *Save, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/SaveProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) StarProduct(ctx context.Context, in *Star, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/StarProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CommentToProduct(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/CommentToProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetDisableProducts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListOrderResponse, error) {
	out := new(ListOrderResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/GetDisableProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductOrders(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*ListOrderResponse, error) {
	out := new(ListOrderResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/GetProductOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductComments(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*ListCommentResponse, error) {
	out := new(ListCommentResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/GetProductComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductLikes(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*ListWishlistResponse, error) {
	out := new(ListWishlistResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/GetProductLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductStars(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*ListStarsResponse, error) {
	out := new(ListStarsResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/GetProductStars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAllComments(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCommentResponse, error) {
	out := new(ListCommentResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/GetAllComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAllStars(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListStarsResponse, error) {
	out := new(ListStarsResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/GetAllStars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
type ProductServiceServer interface {
	CreateProduct(context.Context, *Product) (*GetWithID, error)
	UpdateProduct(context.Context, *Product) (*Product, error)
	DeleteProduct(context.Context, *GetWithID) (*DeleteResponse, error)
	GetProductByID(context.Context, *GetWithID) (*Product, error)
	GetAllProducts(context.Context, *ListRequest) (*ListProductResponse, error)
	CreateOrder(context.Context, *Order) (*GetWithID, error)
	CancelOrder(context.Context, *GetWithID) (*DeleteResponse, error)
	GetOrderByID(context.Context, *GetWithID) (*Order, error)
	GetAllOrders(context.Context, *ListRequest) (*ListOrderResponse, error)
	SearchProduct(context.Context, *Filter) (*ListProductResponse, error)
	Recommendation(context.Context, *Recom) (*ListProductResponse, error)
	GetSavedProductsByUserID(context.Context, *GetWithUserID) (*ListProductResponse, error)
	GetWishlistByUserID(context.Context, *GetWithUserID) (*ListProductResponse, error)
	GetOrderedProductsByUserID(context.Context, *GetWithUserID) (*ListProductResponse, error)
	LikeProduct(context.Context, *Like) (*MoveResponse, error)
	SaveProduct(context.Context, *Save) (*MoveResponse, error)
	StarProduct(context.Context, *Star) (*MoveResponse, error)
	CommentToProduct(context.Context, *Comment) (*MoveResponse, error)
	GetDisableProducts(context.Context, *ListRequest) (*ListOrderResponse, error)
	GetProductOrders(context.Context, *GetWithID) (*ListOrderResponse, error)
	GetProductComments(context.Context, *GetWithID) (*ListCommentResponse, error)
	GetProductLikes(context.Context, *GetWithID) (*ListWishlistResponse, error)
	GetProductStars(context.Context, *GetWithID) (*ListStarsResponse, error)
	GetAllComments(context.Context, *ListRequest) (*ListCommentResponse, error)
	GetAllStars(context.Context, *ListRequest) (*ListStarsResponse, error)
}

// UnimplementedProductServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (*UnimplementedProductServiceServer) CreateProduct(ctx context.Context, req *Product) (*GetWithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (*UnimplementedProductServiceServer) UpdateProduct(ctx context.Context, req *Product) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (*UnimplementedProductServiceServer) DeleteProduct(ctx context.Context, req *GetWithID) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (*UnimplementedProductServiceServer) GetProductByID(ctx context.Context, req *GetWithID) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductByID not implemented")
}
func (*UnimplementedProductServiceServer) GetAllProducts(ctx context.Context, req *ListRequest) (*ListProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProducts not implemented")
}
func (*UnimplementedProductServiceServer) CreateOrder(ctx context.Context, req *Order) (*GetWithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (*UnimplementedProductServiceServer) CancelOrder(ctx context.Context, req *GetWithID) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (*UnimplementedProductServiceServer) GetOrderByID(ctx context.Context, req *GetWithID) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderByID not implemented")
}
func (*UnimplementedProductServiceServer) GetAllOrders(ctx context.Context, req *ListRequest) (*ListOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOrders not implemented")
}
func (*UnimplementedProductServiceServer) SearchProduct(ctx context.Context, req *Filter) (*ListProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProduct not implemented")
}
func (*UnimplementedProductServiceServer) Recommendation(ctx context.Context, req *Recom) (*ListProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recommendation not implemented")
}
func (*UnimplementedProductServiceServer) GetSavedProductsByUserID(ctx context.Context, req *GetWithUserID) (*ListProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSavedProductsByUserID not implemented")
}
func (*UnimplementedProductServiceServer) GetWishlistByUserID(ctx context.Context, req *GetWithUserID) (*ListProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWishlistByUserID not implemented")
}
func (*UnimplementedProductServiceServer) GetOrderedProductsByUserID(ctx context.Context, req *GetWithUserID) (*ListProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderedProductsByUserID not implemented")
}
func (*UnimplementedProductServiceServer) LikeProduct(ctx context.Context, req *Like) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeProduct not implemented")
}
func (*UnimplementedProductServiceServer) SaveProduct(ctx context.Context, req *Save) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveProduct not implemented")
}
func (*UnimplementedProductServiceServer) StarProduct(ctx context.Context, req *Star) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StarProduct not implemented")
}
func (*UnimplementedProductServiceServer) CommentToProduct(ctx context.Context, req *Comment) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentToProduct not implemented")
}
func (*UnimplementedProductServiceServer) GetDisableProducts(ctx context.Context, req *ListRequest) (*ListOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisableProducts not implemented")
}
func (*UnimplementedProductServiceServer) GetProductOrders(ctx context.Context, req *GetWithID) (*ListOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductOrders not implemented")
}
func (*UnimplementedProductServiceServer) GetProductComments(ctx context.Context, req *GetWithID) (*ListCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductComments not implemented")
}
func (*UnimplementedProductServiceServer) GetProductLikes(ctx context.Context, req *GetWithID) (*ListWishlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductLikes not implemented")
}
func (*UnimplementedProductServiceServer) GetProductStars(ctx context.Context, req *GetWithID) (*ListStarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductStars not implemented")
}
func (*UnimplementedProductServiceServer) GetAllComments(ctx context.Context, req *ListRequest) (*ListCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllComments not implemented")
}
func (*UnimplementedProductServiceServer) GetAllStars(ctx context.Context, req *ListRequest) (*ListStarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStars not implemented")
}

func RegisterProductServiceServer(s *grpc.Server, srv ProductServiceServer) {
	s.RegisterService(&_ProductService_serviceDesc, srv)
}

func _ProductService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteProduct(ctx, req.(*GetWithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/GetProductByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductByID(ctx, req.(*GetWithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAllProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAllProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/GetAllProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAllProducts(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CancelOrder(ctx, req.(*GetWithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetOrderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetOrderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/GetOrderByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetOrderByID(ctx, req.(*GetWithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAllOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAllOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/GetAllOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAllOrders(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_SearchProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).SearchProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/SearchProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).SearchProduct(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_Recommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Recom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).Recommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/Recommendation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).Recommendation(ctx, req.(*Recom))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetSavedProductsByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithUserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetSavedProductsByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/GetSavedProductsByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetSavedProductsByUserID(ctx, req.(*GetWithUserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetWishlistByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithUserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetWishlistByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/GetWishlistByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetWishlistByUserID(ctx, req.(*GetWithUserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetOrderedProductsByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithUserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetOrderedProductsByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/GetOrderedProductsByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetOrderedProductsByUserID(ctx, req.(*GetWithUserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_LikeProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Like)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).LikeProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/LikeProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).LikeProduct(ctx, req.(*Like))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_SaveProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Save)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).SaveProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/SaveProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).SaveProduct(ctx, req.(*Save))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_StarProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Star)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).StarProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/StarProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).StarProduct(ctx, req.(*Star))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CommentToProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CommentToProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/CommentToProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CommentToProduct(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetDisableProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetDisableProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/GetDisableProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetDisableProducts(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/GetProductOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductOrders(ctx, req.(*GetWithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/GetProductComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductComments(ctx, req.(*GetWithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/GetProductLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductLikes(ctx, req.(*GetWithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductStars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductStars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/GetProductStars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductStars(ctx, req.(*GetWithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAllComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAllComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/GetAllComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAllComments(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAllStars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAllStars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/GetAllStars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAllStars(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProductService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "product_service.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _ProductService_CreateProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ProductService_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ProductService_DeleteProduct_Handler,
		},
		{
			MethodName: "GetProductByID",
			Handler:    _ProductService_GetProductByID_Handler,
		},
		{
			MethodName: "GetAllProducts",
			Handler:    _ProductService_GetAllProducts_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _ProductService_CreateOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _ProductService_CancelOrder_Handler,
		},
		{
			MethodName: "GetOrderByID",
			Handler:    _ProductService_GetOrderByID_Handler,
		},
		{
			MethodName: "GetAllOrders",
			Handler:    _ProductService_GetAllOrders_Handler,
		},
		{
			MethodName: "SearchProduct",
			Handler:    _ProductService_SearchProduct_Handler,
		},
		{
			MethodName: "Recommendation",
			Handler:    _ProductService_Recommendation_Handler,
		},
		{
			MethodName: "GetSavedProductsByUserID",
			Handler:    _ProductService_GetSavedProductsByUserID_Handler,
		},
		{
			MethodName: "GetWishlistByUserID",
			Handler:    _ProductService_GetWishlistByUserID_Handler,
		},
		{
			MethodName: "GetOrderedProductsByUserID",
			Handler:    _ProductService_GetOrderedProductsByUserID_Handler,
		},
		{
			MethodName: "LikeProduct",
			Handler:    _ProductService_LikeProduct_Handler,
		},
		{
			MethodName: "SaveProduct",
			Handler:    _ProductService_SaveProduct_Handler,
		},
		{
			MethodName: "StarProduct",
			Handler:    _ProductService_StarProduct_Handler,
		},
		{
			MethodName: "CommentToProduct",
			Handler:    _ProductService_CommentToProduct_Handler,
		},
		{
			MethodName: "GetDisableProducts",
			Handler:    _ProductService_GetDisableProducts_Handler,
		},
		{
			MethodName: "GetProductOrders",
			Handler:    _ProductService_GetProductOrders_Handler,
		},
		{
			MethodName: "GetProductComments",
			Handler:    _ProductService_GetProductComments_Handler,
		},
		{
			MethodName: "GetProductLikes",
			Handler:    _ProductService_GetProductLikes_Handler,
		},
		{
			MethodName: "GetProductStars",
			Handler:    _ProductService_GetProductStars_Handler,
		},
		{
			MethodName: "GetAllComments",
			Handler:    _ProductService_GetAllComments_Handler,
		},
		{
			MethodName: "GetAllStars",
			Handler:    _ProductService_GetAllStars_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product_service.proto",
}
