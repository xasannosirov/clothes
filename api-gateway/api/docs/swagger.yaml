definitions:
  models.Category:
    properties:
      category_id:
        type: string
      category_name:
        type: string
    type: object
  models.CategoryReq:
    properties:
      category_name:
        type: string
    type: object
  models.Error:
    properties:
      message:
        type: string
    type: object
  models.ListProduct:
    properties:
      products:
        items:
          $ref: '#/definitions/models.Product'
        type: array
      total_count:
        type: integer
    type: object
  models.ListUser:
    properties:
      totcal_count:
        type: integer
      user:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.Login:
    properties:
      email:
        example: xasannosirov094@gmail.com
        type: string
      password:
        example: Sehtols@01
        type: string
    type: object
  models.LoginResp:
    properties:
      access_token:
        type: string
      age:
        type: integer
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      id:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
      refresh_token:
        type: string
      role:
        type: string
    type: object
  models.Media:
    properties:
      file_name:
        type: string
      id:
        type: string
      image_url:
        type: string
      productId:
        type: string
    type: object
  models.Product:
    properties:
      age_max:
        type: integer
      age_min:
        type: integer
      category_id:
        type: string
      color:
        items:
          type: string
        type: array
      cost:
        type: number
      count:
        type: integer
      description:
        type: string
      discount:
        type: number
      for_gender:
        type: string
      image_url:
        items:
          type: string
        type: array
      made_in:
        type: string
      product_id:
        type: string
      product_name:
        type: string
      size:
        items:
          type: string
        type: array
    type: object
  models.ProductCreateResponse:
    properties:
      product_id:
        type: string
    type: object
  models.ProductImages:
    properties:
      images:
        items:
          $ref: '#/definitions/models.Media'
        type: array
    type: object
  models.ProductReq:
    properties:
      age_max:
        type: integer
      age_min:
        type: integer
      category_id:
        type: string
      color:
        items:
          type: string
        type: array
      cost:
        type: number
      count:
        type: integer
      description:
        type: string
      discount:
        type: number
      for_gender:
        type: string
      made_in:
        type: string
      product_name:
        type: string
      size:
        items:
          type: string
        type: array
    type: object
  models.ResetPassword:
    properties:
      email:
        type: string
      new_password:
        type: string
    type: object
  models.TokenResp:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      role:
        type: string
      user_id:
        type: string
    type: object
  models.UpdatePassword:
    properties:
      confir_password:
        type: string
      new_passowd:
        type: string
      present_password:
        description: user id form token
        type: string
    type: object
  models.User:
    properties:
      access_token:
        type: string
      age:
        type: integer
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      id:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
      refresh_token:
        type: string
    type: object
  models.UserCreateResponse:
    properties:
      user_id:
        type: string
    type: object
  models.UserRegister:
    properties:
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      last_name:
        type: string
      password:
        type: string
    type: object
  models.WorkerPost:
    properties:
      age:
        type: integer
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
    type: object
  models.WorkerPut:
    properties:
      age:
        type: integer
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      id:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
    type: object
info:
  contact: {}
paths:
  /v1/categories:
    get:
      consumes:
      - application/json
      description: This API for getting categories
      parameters:
      - description: Page
        in: query
        name: page
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: List Category
      tags:
      - category
  /v1/category:
    post:
      consumes:
      - application/json
      description: This API for create a new category for product
      parameters:
      - description: Create Category Model
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.CategoryReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Create Category
      tags:
      - category
    put:
      consumes:
      - application/json
      description: This API for update a category
      parameters:
      - description: Create Category Model
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Update Category
      tags:
      - category
  /v1/category/{id}:
    delete:
      consumes:
      - application/json
      description: This API for delete a category with id
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Delete Category
      tags:
      - category
    get:
      consumes:
      - application/json
      description: This API for getting a category with id
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Get Category
      tags:
      - category
  /v1/category/search:
    get:
      consumes:
      - application/json
      description: This api search products with category
      parameters:
      - description: Page
        in: query
        name: page
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      - description: Category Name
        in: query
        name: name
        required: true
        type: string
      produces:
      - applocation/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListProduct'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Search Category
      tags:
      - category
  /v1/forgot/{email}:
    post:
      consumes:
      - application/json
      description: Api for sending otp
      parameters:
      - description: Email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Forgot Password
      tags:
      - auth
  /v1/google/callback:
    get:
      description: |-
        Handles the callback from Google OAuth 2.0,
        exchanges code for token and retrieves user info
      parameters:
      - description: OAuth State
        in: query
        name: state
        required: true
        type: string
      - description: OAuth Code
        in: query
        name: code
        required: true
        type: string
      responses:
        "200":
          description: User info
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Handle Google callback
      tags:
      - auth
  /v1/google/login:
    get:
      description: Redirects the user to Google's OAuth 2.0 consent page
      responses:
        "303":
          description: Redirect
          schema:
            type: string
      summary: Google Login
      tags:
      - auth
  /v1/like/{id}:
    post:
      consumes:
      - application/json
      description: This API for save likes a product by user
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Like Product
      tags:
      - wishlist
  /v1/login:
    post:
      consumes:
      - application/json
      description: Api for user user
      parameters:
      - description: Login Model
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Login
      tags:
      - auth
  /v1/media/{id}:
    delete:
      consumes:
      - application/json
      description: Api for delete media
      parameters:
      - description: productId
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Delete Media
      tags:
      - media
    get:
      consumes:
      - application/json
      description: Api for getting media by id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProductImages'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Get Media
      tags:
      - media
  /v1/media/upload-photo:
    post:
      consumes:
      - multipart/form-data
      description: Through this API, frontend can upload a photo and get the link
        to the media.
      parameters:
      - description: Product ID
        in: query
        name: id
        required: true
        type: string
      - description: File
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Upload media
      tags:
      - media
  /v1/product:
    post:
      consumes:
      - application/json
      description: This API for create a new product
      parameters:
      - description: Create Product Model
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.ProductReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ProductCreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Create Product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: This API for updating a product
      parameters:
      - description: Update Product Model
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Update Product
      tags:
      - products
  /v1/product/{id}:
    delete:
      consumes:
      - application/json
      description: This API for deleting a product with product_id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Delete Product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: This API for getting a product with product_id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Get Product
      tags:
      - products
  /v1/products:
    get:
      consumes:
      - application/json
      description: This API for getting list of products
      parameters:
      - description: Page
        in: query
        name: page
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      - description: Product Name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListProduct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: List Products
      tags:
      - products
  /v1/products/discount:
    get:
      consumes:
      - application/json
      description: This API returns discount products
      parameters:
      - description: Page
        in: query
        name: page
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListProduct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Discount Products
      tags:
      - products
  /v1/register:
    post:
      consumes:
      - application/json
      description: Api for register user
      parameters:
      - description: Register User
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.UserRegister'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Register
      tags:
      - auth
  /v1/reset-password:
    put:
      consumes:
      - application/json
      description: Api for reset password
      parameters:
      - description: Reset Password
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.ResetPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Reset Password
      tags:
      - auth
  /v1/token/{refresh}:
    get:
      consumes:
      - application/json
      description: Api for updated acces token
      parameters:
      - description: Refresh Token
        in: path
        name: refresh
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TokenResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: New Token
      tags:
      - auth
  /v1/update-password:
    put:
      description: This API for update password with
      parameters:
      - description: Update Password
        in: body
        name: info
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePassword'
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Update Password
      tags:
      - auth
  /v1/user:
    post:
      consumes:
      - application/json
      description: Api for create a new user
      parameters:
      - description: Create User Model
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRegister'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserCreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Create User
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Api for update a user
      parameters:
      - description: Update User Model
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.WorkerPut'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Update User
      tags:
      - users
  /v1/user/{id}:
    delete:
      consumes:
      - application/json
      description: Api for delete a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Delete User
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Api for getting a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Get User
      tags:
      - users
  /v1/users:
    get:
      consumes:
      - application/json
      description: Api for getting list user
      parameters:
      - description: Page
        in: query
        name: page
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: List User
      tags:
      - users
  /v1/verify:
    post:
      consumes:
      - application/json
      description: Api for verify user
      parameters:
      - description: Email
        in: query
        name: email
        required: true
        type: string
      - description: OTP
        in: query
        name: otp
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Verify OTP
      tags:
      - auth
  /v1/wishlist:
    get:
      consumes:
      - application/json
      description: This API for getting wishlist for user
      parameters:
      - description: Page
        in: query
        name: page
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListProduct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: User Wishlist
      tags:
      - wishlist
  /v1/worker:
    post:
      consumes:
      - application/json
      description: Api for create a new worker
      parameters:
      - description: Create Worker Model
        in: body
        name: worker
        required: true
        schema:
          $ref: '#/definitions/models.WorkerPost'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserCreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Create Worker
      tags:
      - workers
    put:
      consumes:
      - application/json
      description: Api for update a user
      parameters:
      - description: Update Worker Model
        in: body
        name: worker
        required: true
        schema:
          $ref: '#/definitions/models.WorkerPut'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.WorkerPut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Update Worker
      tags:
      - workers
  /v1/worker/{id}:
    delete:
      consumes:
      - application/json
      description: Api for delete a worker
      parameters:
      - description: Worker ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Delete Worker
      tags:
      - workers
    get:
      consumes:
      - application/json
      description: Api for getting a worker
      parameters:
      - description: Worker ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Get Worker
      tags:
      - workers
  /v1/workers:
    get:
      consumes:
      - application/json
      description: Api for getting list worker
      parameters:
      - description: Page
        in: query
        name: page
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: List Worker
      tags:
      - workers
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
