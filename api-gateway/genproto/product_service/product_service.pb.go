// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: product_service.proto

package product_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("product_service.proto", fileDescriptor_64a1a24e6b7d7ed5) }

var fileDescriptor_64a1a24e6b7d7ed5 = []byte{
	// 496 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x26, 0x17, 0x04, 0x93, 0xc4, 0x54, 0x5b, 0x95, 0x16, 0x0b, 0x2c, 0xce, 0x1c, 0x8a, 0x04,
	0x77, 0x04, 0x49, 0xa8, 0x03, 0x24, 0x25, 0x24, 0x44, 0x95, 0xb8, 0xa0, 0x6d, 0x32, 0x6a, 0x56,
	0xf9, 0xd9, 0x64, 0x77, 0x1d, 0xa9, 0xaf, 0xc0, 0x13, 0xf0, 0x48, 0x1c, 0x79, 0x04, 0x14, 0x5e,
	0x04, 0xd5, 0x63, 0x97, 0x28, 0x6b, 0xaf, 0x23, 0xb9, 0x47, 0xcf, 0x7c, 0xfb, 0xed, 0x37, 0xf3,
	0x7d, 0xb6, 0xe1, 0x68, 0xa9, 0xe4, 0x38, 0x1a, 0x99, 0xef, 0x1a, 0xd5, 0x5a, 0x8c, 0xf0, 0x74,
	0xa9, 0xa4, 0x91, 0xec, 0xd1, 0x4e, 0xd9, 0x3f, 0x4c, 0x0b, 0x73, 0x39, 0xc6, 0x19, 0xa1, 0x5e,
	0xfd, 0xf0, 0xc0, 0xeb, 0x51, 0x7d, 0x40, 0x38, 0x76, 0x06, 0x5e, 0x53, 0x21, 0x37, 0xd8, 0xe4,
	0x06, 0xaf, 0xa4, 0xba, 0x66, 0x4f, 0x4e, 0x77, 0xaf, 0x48, 0x5b, 0x7e, 0x7e, 0x8b, 0x7d, 0x02,
	0xaf, 0x85, 0x33, 0xdc, 0xe2, 0xf1, 0x2d, 0x70, 0x88, 0xe6, 0x42, 0x98, 0xc9, 0x87, 0x96, 0xff,
	0xcc, 0xea, 0x75, 0xe5, 0x1a, 0xfb, 0xa8, 0x97, 0x72, 0xa1, 0x63, 0x51, 0xc3, 0xe5, 0xb8, 0xbc,
	0xa8, 0x16, 0x54, 0x43, 0x34, 0x7b, 0x29, 0x72, 0xb0, 0x74, 0xc1, 0xeb, 0x08, 0x9d, 0xd2, 0x08,
	0xd4, 0xec, 0xa9, 0x05, 0xbe, 0x01, 0xf4, 0x71, 0x15, 0xa1, 0x36, 0x19, 0xc3, 0x6d, 0x1d, 0xbf,
	0x66, 0xe7, 0xe0, 0x0d, 0x90, 0xab, 0xd1, 0xe4, 0xb6, 0x12, 0x58, 0x07, 0x08, 0x90, 0x12, 0x66,
	0x5f, 0x97, 0x18, 0xc9, 0xda, 0xe0, 0x0d, 0x17, 0x62, 0x15, 0xfd, 0x5f, 0xd6, 0xb1, 0x85, 0xef,
	0x71, 0xc5, 0xe7, 0xba, 0x68, 0xed, 0xef, 0xa1, 0x4e, 0x59, 0x48, 0xa9, 0x4f, 0x6c, 0x22, 0x7a,
	0xf6, 0x1d, 0xab, 0x64, 0x4d, 0xa8, 0x93, 0x7b, 0xc5, 0x34, 0xb9, 0x1d, 0xf6, 0x11, 0xea, 0x94,
	0xa7, 0xb4, 0x50, 0x22, 0x4e, 0x0d, 0x80, 0x10, 0xcd, 0x3e, 0x44, 0x2e, 0x3d, 0xb5, 0xad, 0xa5,
	0x17, 0x45, 0xc0, 0xed, 0x58, 0x17, 0xea, 0x64, 0x70, 0x5a, 0x28, 0x17, 0x80, 0x2f, 0x70, 0x18,
	0xa2, 0x69, 0x09, 0x3d, 0x92, 0xd1, 0xe2, 0x6e, 0x14, 0x9e, 0x03, 0x23, 0x4a, 0x7e, 0x39, 0xc3,
	0x3d, 0x19, 0xfd, 0xcc, 0xee, 0x67, 0x35, 0x46, 0xc5, 0x9a, 0x50, 0xed, 0x88, 0xe9, 0xad, 0x97,
	0x47, 0x19, 0xd0, 0x29, 0x16, 0xd9, 0xd8, 0x81, 0xda, 0x50, 0xa3, 0xba, 0x10, 0x7a, 0x32, 0x13,
	0xba, 0xec, 0xd6, 0x3a, 0x50, 0x1b, 0xf0, 0x35, 0x7e, 0x95, 0x0d, 0xae, 0xa7, 0x68, 0xd8, 0x73,
	0x0b, 0x4d, 0x0d, 0x7a, 0x23, 0xfa, 0xb8, 0x72, 0x66, 0xbe, 0x07, 0x07, 0x14, 0xd7, 0x33, 0x25,
	0xe7, 0x09, 0xa3, 0x3d, 0x0e, 0x41, 0xa8, 0x5d, 0x34, 0xed, 0x5b, 0x78, 0x18, 0xa2, 0x49, 0xa8,
	0x5c, 0x99, 0x3d, 0xce, 0x11, 0xce, 0xde, 0x41, 0x95, 0xc4, 0x93, 0x07, 0x8f, 0x2d, 0x5c, 0x5c,
	0x77, 0x8e, 0xf5, 0x06, 0x1e, 0x84, 0x98, 0x78, 0xe8, 0xd2, 0x90, 0xc3, 0xcd, 0xda, 0x50, 0xa5,
	0x99, 0x8b, 0x29, 0x0a, 0xd6, 0xd1, 0x83, 0x83, 0x1b, 0xf3, 0x63, 0x9e, 0xb6, 0xd0, 0xa6, 0xf4,
	0x77, 0xb3, 0xf1, 0xe2, 0xd7, 0x26, 0xa8, 0xfc, 0xde, 0x04, 0x95, 0x3f, 0x9b, 0xa0, 0xf2, 0xf3,
	0x6f, 0x70, 0xef, 0xdb, 0xc9, 0x15, 0x2e, 0xe2, 0x1f, 0xe5, 0xcb, 0x9d, 0x73, 0x97, 0xf7, 0xe3,
	0xf2, 0xeb, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcc, 0xce, 0xd0, 0x43, 0x7e, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProductServiceClient interface {
	CreateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error)
	DeleteCategory(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*MoveResponse, error)
	UpdateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error)
	GetCategory(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*Category, error)
	ListCategories(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCategory, error)
	SearchCategory(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListProduct, error)
	UniqueCategory(ctx context.Context, in *Params, opts ...grpc.CallOption) (*MoveResponse, error)
	CreateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*GetWithID, error)
	UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error)
	DeleteProduct(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*MoveResponse, error)
	GetProduct(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*Product, error)
	ListProducts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListProduct, error)
	SearchProduct(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListProduct, error)
	GetDiscountProducts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListProduct, error)
	GetDisableProducts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListOrder, error)
	LikeProduct(ctx context.Context, in *Like, opts ...grpc.CallOption) (*MoveResponse, error)
	UserWishlist(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListProduct, error)
	SaveToBasket(ctx context.Context, in *BasketCreateReq, opts ...grpc.CallOption) (*GetWithID, error)
	DeleteFromBasket(ctx context.Context, in *DeleteBasket, opts ...grpc.CallOption) (*MoveResponse, error)
	GetBasket(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*Basket, error)
	CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*GetWithID, error)
	GetOrder(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*Order, error)
	DeleteOrder(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*MoveResponse, error)
	UserOrderHistory(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListProduct, error)
}

type productServiceClient struct {
	cc *grpc.ClientConn
}

func NewProductServiceClient(cc *grpc.ClientConn) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) CreateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/CreateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteCategory(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/DeleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/UpdateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetCategory(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/GetCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListCategories(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCategory, error) {
	out := new(ListCategory)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/ListCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) SearchCategory(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListProduct, error) {
	out := new(ListProduct)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/SearchCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UniqueCategory(ctx context.Context, in *Params, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/UniqueCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*GetWithID, error) {
	out := new(GetWithID)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteProduct(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProduct(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListProducts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListProduct, error) {
	out := new(ListProduct)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/ListProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) SearchProduct(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListProduct, error) {
	out := new(ListProduct)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/SearchProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetDiscountProducts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListProduct, error) {
	out := new(ListProduct)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/GetDiscountProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetDisableProducts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListOrder, error) {
	out := new(ListOrder)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/GetDisableProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) LikeProduct(ctx context.Context, in *Like, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/LikeProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UserWishlist(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListProduct, error) {
	out := new(ListProduct)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/UserWishlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) SaveToBasket(ctx context.Context, in *BasketCreateReq, opts ...grpc.CallOption) (*GetWithID, error) {
	out := new(GetWithID)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/SaveToBasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteFromBasket(ctx context.Context, in *DeleteBasket, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/DeleteFromBasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetBasket(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*Basket, error) {
	out := new(Basket)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/GetBasket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*GetWithID, error) {
	out := new(GetWithID)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetOrder(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteOrder(ctx context.Context, in *GetWithID, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/DeleteOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UserOrderHistory(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListProduct, error) {
	out := new(ListProduct)
	err := c.cc.Invoke(ctx, "/product_service.ProductService/UserOrderHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
type ProductServiceServer interface {
	CreateCategory(context.Context, *Category) (*Category, error)
	DeleteCategory(context.Context, *GetWithID) (*MoveResponse, error)
	UpdateCategory(context.Context, *Category) (*Category, error)
	GetCategory(context.Context, *GetWithID) (*Category, error)
	ListCategories(context.Context, *ListRequest) (*ListCategory, error)
	SearchCategory(context.Context, *SearchRequest) (*ListProduct, error)
	UniqueCategory(context.Context, *Params) (*MoveResponse, error)
	CreateProduct(context.Context, *Product) (*GetWithID, error)
	UpdateProduct(context.Context, *Product) (*Product, error)
	DeleteProduct(context.Context, *GetWithID) (*MoveResponse, error)
	GetProduct(context.Context, *GetWithID) (*Product, error)
	ListProducts(context.Context, *ListRequest) (*ListProduct, error)
	SearchProduct(context.Context, *SearchRequest) (*ListProduct, error)
	GetDiscountProducts(context.Context, *ListRequest) (*ListProduct, error)
	GetDisableProducts(context.Context, *ListRequest) (*ListOrder, error)
	LikeProduct(context.Context, *Like) (*MoveResponse, error)
	UserWishlist(context.Context, *SearchRequest) (*ListProduct, error)
	SaveToBasket(context.Context, *BasketCreateReq) (*GetWithID, error)
	DeleteFromBasket(context.Context, *DeleteBasket) (*MoveResponse, error)
	GetBasket(context.Context, *GetWithID) (*Basket, error)
	CreateOrder(context.Context, *Order) (*GetWithID, error)
	GetOrder(context.Context, *GetWithID) (*Order, error)
	DeleteOrder(context.Context, *GetWithID) (*MoveResponse, error)
	UserOrderHistory(context.Context, *SearchRequest) (*ListProduct, error)
}

// UnimplementedProductServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (*UnimplementedProductServiceServer) CreateCategory(ctx context.Context, req *Category) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (*UnimplementedProductServiceServer) DeleteCategory(ctx context.Context, req *GetWithID) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (*UnimplementedProductServiceServer) UpdateCategory(ctx context.Context, req *Category) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (*UnimplementedProductServiceServer) GetCategory(ctx context.Context, req *GetWithID) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (*UnimplementedProductServiceServer) ListCategories(ctx context.Context, req *ListRequest) (*ListCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (*UnimplementedProductServiceServer) SearchCategory(ctx context.Context, req *SearchRequest) (*ListProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCategory not implemented")
}
func (*UnimplementedProductServiceServer) UniqueCategory(ctx context.Context, req *Params) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UniqueCategory not implemented")
}
func (*UnimplementedProductServiceServer) CreateProduct(ctx context.Context, req *Product) (*GetWithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (*UnimplementedProductServiceServer) UpdateProduct(ctx context.Context, req *Product) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (*UnimplementedProductServiceServer) DeleteProduct(ctx context.Context, req *GetWithID) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (*UnimplementedProductServiceServer) GetProduct(ctx context.Context, req *GetWithID) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (*UnimplementedProductServiceServer) ListProducts(ctx context.Context, req *ListRequest) (*ListProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (*UnimplementedProductServiceServer) SearchProduct(ctx context.Context, req *SearchRequest) (*ListProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProduct not implemented")
}
func (*UnimplementedProductServiceServer) GetDiscountProducts(ctx context.Context, req *ListRequest) (*ListProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscountProducts not implemented")
}
func (*UnimplementedProductServiceServer) GetDisableProducts(ctx context.Context, req *ListRequest) (*ListOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisableProducts not implemented")
}
func (*UnimplementedProductServiceServer) LikeProduct(ctx context.Context, req *Like) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeProduct not implemented")
}
func (*UnimplementedProductServiceServer) UserWishlist(ctx context.Context, req *SearchRequest) (*ListProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserWishlist not implemented")
}
func (*UnimplementedProductServiceServer) SaveToBasket(ctx context.Context, req *BasketCreateReq) (*GetWithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveToBasket not implemented")
}
func (*UnimplementedProductServiceServer) DeleteFromBasket(ctx context.Context, req *DeleteBasket) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromBasket not implemented")
}
func (*UnimplementedProductServiceServer) GetBasket(ctx context.Context, req *GetWithID) (*Basket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasket not implemented")
}
func (*UnimplementedProductServiceServer) CreateOrder(ctx context.Context, req *Order) (*GetWithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (*UnimplementedProductServiceServer) GetOrder(ctx context.Context, req *GetWithID) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (*UnimplementedProductServiceServer) DeleteOrder(ctx context.Context, req *GetWithID) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (*UnimplementedProductServiceServer) UserOrderHistory(ctx context.Context, req *SearchRequest) (*ListProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOrderHistory not implemented")
}

func RegisterProductServiceServer(s *grpc.Server, srv ProductServiceServer) {
	s.RegisterService(&_ProductService_serviceDesc, srv)
}

func _ProductService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/CreateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/DeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteCategory(ctx, req.(*GetWithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/UpdateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/GetCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetCategory(ctx, req.(*GetWithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/ListCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListCategories(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_SearchCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).SearchCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/SearchCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).SearchCategory(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UniqueCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Params)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UniqueCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/UniqueCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UniqueCategory(ctx, req.(*Params))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteProduct(ctx, req.(*GetWithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProduct(ctx, req.(*GetWithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/ListProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListProducts(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_SearchProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).SearchProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/SearchProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).SearchProduct(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetDiscountProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetDiscountProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/GetDiscountProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetDiscountProducts(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetDisableProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetDisableProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/GetDisableProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetDisableProducts(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_LikeProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Like)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).LikeProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/LikeProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).LikeProduct(ctx, req.(*Like))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UserWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UserWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/UserWishlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UserWishlist(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_SaveToBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasketCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).SaveToBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/SaveToBasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).SaveToBasket(ctx, req.(*BasketCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteFromBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBasket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteFromBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/DeleteFromBasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteFromBasket(ctx, req.(*DeleteBasket))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/GetBasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetBasket(ctx, req.(*GetWithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetOrder(ctx, req.(*GetWithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/DeleteOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteOrder(ctx, req.(*GetWithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UserOrderHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UserOrderHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_service.ProductService/UserOrderHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UserOrderHistory(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProductService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "product_service.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCategory",
			Handler:    _ProductService_CreateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _ProductService_DeleteCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _ProductService_UpdateCategory_Handler,
		},
		{
			MethodName: "GetCategory",
			Handler:    _ProductService_GetCategory_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _ProductService_ListCategories_Handler,
		},
		{
			MethodName: "SearchCategory",
			Handler:    _ProductService_SearchCategory_Handler,
		},
		{
			MethodName: "UniqueCategory",
			Handler:    _ProductService_UniqueCategory_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _ProductService_CreateProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ProductService_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ProductService_DeleteProduct_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _ProductService_GetProduct_Handler,
		},
		{
			MethodName: "ListProducts",
			Handler:    _ProductService_ListProducts_Handler,
		},
		{
			MethodName: "SearchProduct",
			Handler:    _ProductService_SearchProduct_Handler,
		},
		{
			MethodName: "GetDiscountProducts",
			Handler:    _ProductService_GetDiscountProducts_Handler,
		},
		{
			MethodName: "GetDisableProducts",
			Handler:    _ProductService_GetDisableProducts_Handler,
		},
		{
			MethodName: "LikeProduct",
			Handler:    _ProductService_LikeProduct_Handler,
		},
		{
			MethodName: "UserWishlist",
			Handler:    _ProductService_UserWishlist_Handler,
		},
		{
			MethodName: "SaveToBasket",
			Handler:    _ProductService_SaveToBasket_Handler,
		},
		{
			MethodName: "DeleteFromBasket",
			Handler:    _ProductService_DeleteFromBasket_Handler,
		},
		{
			MethodName: "GetBasket",
			Handler:    _ProductService_GetBasket_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _ProductService_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _ProductService_GetOrder_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _ProductService_DeleteOrder_Handler,
		},
		{
			MethodName: "UserOrderHistory",
			Handler:    _ProductService_UserOrderHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product_service.proto",
}
